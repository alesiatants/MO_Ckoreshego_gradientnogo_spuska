// Метод скорейшего градиентного спуска.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//
#include <iostream>
#include <clocale>
#include <conio.h>
#include <cmath>
#include <cstring>
#define pow2(x) (x)*(x)
using namespace std;
int n;
double deltax, h;
//целевая функция
double f(double* x) {
    
   
       
    return pow2(x[0]) + 2 * pow2(x[1]) - 3 * x[0] + 5 * x[1] + 1;
}
//нахождение градиента функции в произвольной точке

void grad(double* x, double* df) {
    double f0 = f(x);
    for (int i = 0; i < n; i++) {
        x[i] += deltax;
        df[i] = (f(x)- f0) / deltax;
        x[i] -= deltax;
    }
}
//расчет вектора градиента нлвой точки и нормы вектора градиента
double norm_grad(double* df) {
    double s = 0;
    for (int i = 0; i < n; i++) {
        s += pow2(df[i]);
    }
    return sqrt(s);
}
//определение координвт новой точки
void new_point(double* x, double* df) {
    for (int i = 0; i < n; x[i] = x[i] - h * df[i], i++);
}

int main()
{
    setlocale(LC_ALL, "Russian");
    int s, t = 0;
    double eps;
    double* x, * xtemp, * df, f0;
    cout << "Расчет оптимального решения задачи\n";
    cout << "Введите размерность задачи оптимизации n="; cin >> n;
    x = new double[n];
    xtemp = new double[n];
    df = new double[n];
    cout << "Введите точность вычисления eps = "; cin >> eps;
    cout << "Введите величину шага h = "; cin >> h;
    cout << "Введите величину приращения deltax = "; cin >> deltax;
    cout << "Введите координаты начальной точки:\n";
    for (int i = 0; i < n; i++) {
        cout << "x[" << i + 1 << "]= "; cin >> x[i];
    }
    
        //вычисления значения функции в начальной точке
    f0 = f(x);
    //расчет градиента функции в произвольной точке
    grad(x, df);
    //условие оклнчания поиска
    while (norm_grad(df) > eps) {
        //копируем массив в резервный
        memcpy(xtemp, x, n * sizeof(double));
        //определяем координаты новой точки
        new_point(x, df);
        //цикл пока целевая функция убывает
        while (f(x)-f0 < 0) {
            //находим значение целевой функции в новой точке
            f0 = f(x);
            memcpy(xtemp, x, n * sizeof(double));
            //определяем координаты новой точки
            new_point(x, df);
        }
        //счетчик
        t++;
        //находим значение целевой функции в новой очке
        f0 = f(x);
        //расчет градиента функции в произвольной точке
        grad(x, df);

    }

    //условие окончания поиска
    if (norm_grad(df) < eps) {
        cout << "\nРезультаты оптимизации:\n";
        for (int i = 0; i < n; i++) {
            cout << "\nx[" << i + 1 << "]= " << x[i];
        }
        cout << "\nЗначение целевой функции f*= " << f(x) << endl;
    }
    else {
        cout << "Измените шаг h!!!\n";
    }
    cout << "\nВыполнено итераций t = " << t << endl;
    delete[]x;
    delete[]xtemp;
    delete[]df;
    

}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
